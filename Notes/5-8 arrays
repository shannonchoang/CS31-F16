////
// goal : figure out standard deviation for scores 
int scores [...]; // an array that will hold all the scores
int nScores = 0; 
int total = 0; 
//Rule for array 
//This is invalid 

int n; 
cin >> n; 
double a[n];
//array size has to be known at compile time
//but be careful of not having enough room 


cout << "enter the scores (negative when done):" << end; 
const int MAX_NUMBER_OF_SCORES = 10000; 
int nScores = 0; 
int total = 0; 
for (;;) // this is an infinite loop 
{
	int s; 
	cin >> s; 
	if (s < 0)
		break; //use this to exit 

	//what is the potential problem of this program?
	//well let's say we read in over 10,000 scores
	if (nScores == MAX_NUMBER_OF_SCORES)
	{
		cout << "I can handle only " << MAX_NUMBER_OF_SCORES << "scores!" << endl;
		cout << "I will continue with just the first " << MAX_NUMBER_OF_SCORES
		<< "values." << endl;
		break; 
	}
	total += s; 
	score [nScores] = s; 
	//because adding one each time, this is the next available position
	nScores++; 
}
if (nScores == 0)
	cout << "There were no scores, so no mean" << endl; 
else 
{
	double mean = static_cast<double>(total)/nScores;
	//note that the original total (tot ) we collected was a INT
	//but division might result in a double
	//static_cast allows us to temporarliy change 
	cout << "The mean is " << mean << endl; 
	double sumOfSquares = 0; 
	// if k<MAX_NUMBER_OF_SCORES 
	// you will visit the garbage values in the array
	// be careful of confusing max capacity of the array & what you're using 
	for (int i = 0; k < nScores; k++)
	{
		double diff = scores[k]- mean;
		sumOfSquares += diff * diff; 
	}
	cout << "The std. deviation is " << sqrt(sumOfSquare / nScores << endl;
}

//this function finds the mean of integers of mean
void setAll (int a[], int n, int value);
//by putting const there, promises not to modify the array 
double computeMean (const int a[], int n);
int main () 
{
	const int MAX_NUMBER_OF_SCORES = 10000; 
	int scores[MAX_NUMBER_OF_SCORES];
	int nScores = 0; 
	// fill up the array, perhaps partially, 
	//and have nScores be the number of items 
	double m = computeMean (scores, nScores);
	...
	int stuff[100]
	//fill up the array, all 100 items 
	cout << computeMean(stuff, 100);
	...
	setAll (stuff, 30, 42); //set stuff[0] through stuff[42]

}
//arrays are passed by reference
//a is where the array starts, it's like another name for the array
//when you pass an array into a function but within the function
//there's no way to find out 
//you can technically put a number in the [] but this does nothing
//to tell the array how many parameters to look at, we have 'n'
//you can pass a 
double computeMean (const int a[], int n)
{
	if (n <= 0)
		return 0.0;

	int total = 0; 
	a[0] = 987; //Error not compile! 
	setAll(a, 1, 987); //Error not compile! 
	//setAll doesn't promise to not change the array

	for (int k = 0, k < ... ; k++)
	{
		total += a[k];
		return static_cast<double>(total)/n;
	}
}

void setAll (int a[], int n, int value)
{
	for (int k = 0; k < n; k++)
		a[k] = value;
	cout << computeMean(a,n) << "is equal to " << value << endl;
	//this combination is fine, because it has been given permission to 
	//in the arguments 
}

//say we want to see how many people are going to a movie theater 
//certain weeks in a month
const int NWEEKS = 5; 
const int NDAYS = 7; 

int attendance[NWEEKS][NDAYS];
...
cout << attendance [2][5] // selects 

//loops through the number of weeks 
for (int i = 0; w < NWEEKS; w++)
{
	int t = 0; //total 
	//as long as d less than days in week
	//for every column in the array 
	for (int d = 0; d < NDAYS; d++)
		t += attendance[w][d];
	cout << "The total for week " << w << " is " << t << endl;
}
//to find if you're going by rows or columns, you figure it out
//by looking at what is changing most rapidly

const string dayNames[NDAYS] = {
 "Monday" , "Tuesday", ..., "Saturday", "Sunday"
}; 

int grandTotal = 0; //this should happen ONCE only because it's total
for (int d = 4; d < NDAYS; d++)
{
	// int grandTotal = 0;  this is stuck in this iteration
	int t = 0; 
	for (int w = 0; w < NWEEKS; w++)
		t += attendance[w][d];
	cout << "The total for " << dayNames[d] << " is " << t << endl;
	grandTotal += t; 
}
cout << "Over the course of " << NWEEKS << " weeks, weekend attendance was "
<< grandTotal << endl;
//to visualize the array 
/*
	0 1 2 3 4 5 6 
0
1
2
3
4
5
6

where NWEEKS is columns & NDAYS is specified by rows 
*/

//let's look at the array differently
//attendance for fridays, saturday, and sundays grand total attendance? 
// 10 - building number; 16 screen number; 5 - weeks; 7 - days
int attendance[10][16][5][7]; //a four dimensional array, this is fine
//but most are one and two dimensionsal arrays 



